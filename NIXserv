#!/bin/bash
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#



version="1.0"

helpInfo()
{
echo -e "
NAME:
	NIXserv.sh -- Host Survey

SYNOPSIS:
 	NIXserv.sh -b/s/v -d 'YYYY-MM-DD HH:MM:SS' -o /<path>/<name>.txt 

DESCRIPTION:
	NIXserv is a command line utility written to automate host survey and enumeration.
	The script begins by determining the distro and startup type of the system it is run on.
	It then proceeds to run and display the host specific survey, broken down by section.

	Run without options, this script saves a standard survey to $HOME/NIXserv.txt.

	-h		Help if you're lost

	-o		<path>/<name> to save. 
			Defaults to $HOME/NIXserv.txt
	
	-b		Brief survey
			Run a limited survey, without any distro or startup checks.
			Useful if you just need quick host info.

	-s		Standard Survey
			Run a survey with distro or startup checks.
			Will not do any logging checks.
	
	-v		Verbose survey
			Run a robust survey
			Include distro checks, startup checks, and logging checks.
	
	-d		When -v is specified, this sets the logging since time to be checked against
			the time specified VS the time the survey was ran. 
			Time is entered in 24 hour clock time.


	Report bugs to https://github.com/TTYlerDurden/


	"

echo -e "\n"
}
# ----------------------------------------------------------------------------------

usageInfo()
{
echo -e "	
Usage:
	NIXserv.sh [-o /<path>/<name>.txt]

	-o	<path>/<name> to save. Defaults to $HOME/NIXserv.txt
	-b	brief scan
	-v	verbose scan
	-h	Help"
echo -e "\n"
}
# ----------------------------------------------------------------------------------

# Checks for arguments save location argument, and if none found, sets the default 
setupSaves()
{
if [ "$saveLocation" ]; then 
	saveLocation=$saveLocation
	echo "Setting save location to $saveLocation"
else
	saveLocation=$HOME/NIXserv.txt
	echo "No save location specified, saving to $HOME/NIXserv.txt"
fi
echo -e "\n"
}
# ----------------------------------------------------------------------------------

# Check for whther or not a -d argument was passed through
setupServTime()
{

if [ "$servTime" ]; then
	servTime=$servTime
	echo "Searching logs since $servTime"
else
	echo "No date/time specified. Logs will display last 10 entries by default."
fi

}
# ----------------------------------------------------------------------------------

distroCheck()
{
echo "---------------------------- [ Distro Checks ] ---------------------------"
# run commands to get system info
distroInfo=`uname -a 2>/dev/null`
kernelInfo=`uname -a | awk '{print $1}'`
releaseInfo=`cat /etc/*-release 2>/dev/null`
procInfo=`cat /proc/version 2>/dev/null`
hostnameInfo=`hostname 2>/dev/null`
initchecksInfo=`ls /sbin | grep 'launch\|init\|xinet' 2>/dev/null`
startupInfo=`man init | head 2>/dev/null`
#macOS
sysproInfo=`system_profiler SPSoftwareDataType` 

if [ $kernelInfo= "Darwin" ]; then

elif [ $kernelInfo= "Linux" ]; then

elif [ $kernelInfo= "Darwin" ]; then

elif [ $kernelInfo= "Darwin" ]; then

else

fi

# check info, return it, and set value for further information based on info
echo -e "\n"
}
# ----------------------------------------------------------------------------------

userChecks()
{
echo -e "---------------------------- [ User Checks ] ---------------------------"
# Start User Checks 
idInfo=`id 2>/dev/null`
pathInfo=`echo $PATH 2>/dev/null`
shellInfo=`echo $SHELL 2>/dev/null`
# What Process + PID you are running as
psPInfo=`ps -p \$\$ 2>/dev/null`
# Other User Checks
wInfo=`w 2>/dev/null`
whoRInfo=`who -r 2>/dev/null`
lastlogInfo=`lastlog 2>/dev/null`
passwdInfo=`cat /etc/passwd 2>/dev/null`
shadowInfo=`cat /etc/shadow 2>/dev/null`
groupInfo=`cat /etc/group 2>/dev/null`
# Check sudo options
sudoVersionInfo=`sudo -V 2>/dev/null`
sudoInfo=`sudo -l 2>/dev/null`
# FreeBSD checks
mpasswdInfo=`cat /etc/master.passwd 2>/dev/null`
spwdInfo=`cat /etc/spwd.db 2>/dev/null`
echo -e "\n"
}
# ----------------------------------------------------------------------------------

discChecks()
{
echo -e "---------------------------- [ Disc Checks ] ---------------------------"
diskSpaceInfo=`df -ah`
# 
# 
# 
# 
# 
# 
# 
echo -e "\n"
}
# ----------------------------------------------------------------------------------

systemChecks()
{
echo -e "---------------------------- [ System Checks ] ---------------------------"
# crontab -l
	# /var/spool/cron/* (user crontabs)
	# /etc/crontab (system-wide crontab)
	# /etc/cron.d/*
	# /etc/cron.daily
	# /etc/cron.hourly
	# /etc/cron.monthly
	# /etc/cron.weekly
	# /var/spool/at/*
	# /etc/anacrontab
	# /var/spool/anacron/*
# show background processes jobs
#
#
echo -e "\n"
}
# ----------------------------------------------------------------------------------

networkChecks()
{
echo -e "---------------------------- [ Network Checks ] ---------------------------"
ifconfigInfo=`ifconfig -a 2>/dev/null`
ipAInfo=`ip -a 2>/dev/null`
netstatInfo=`netstat -ano 2>/dev/null`
netstatTCUDPInfo=`netstat -auntp 2>/dev/null`
sockstatInfo=`ss -ano 2>/dev/null`
arpInfo=`arp -a 2>/dev/null`
routeInfo=`route -vn 2>/dev/null`
route_statInfo=`netstat -rn 2>/dev/null`
dnsInfo=`cat /etc/resolv.conf 2>/dev/null`
nsswitchInfo=`cat /etc/nsswitch.conf 2>/dev/null`

#FreeBSD Checks
# pf.conf
# syslog.conf
}
# ----------------------------------------------------------------------------------

processChecks()
{
echo -e "---------------------------- [ Process Checks ] ---------------------------"
processListInfo=`ps -elf 2>/dev/null` 
#FreeBSD checks
processListInfo=`ps aulx 2>/dev/null` 

initInfo=`cat /etc/inetd.conf 2>/dev/null`
xinetInfo=`cat /etc/xinetd.conf 2>/dev/null`
 
# /etc/rc.d/init.d
# /usr/local/etc/rc.d
# /lib/systemd/
echo -e "\n"
}
# ----------------------------------------------------------------------------------
userChecks()
{
echo -e "---------------------------- [ User Checks ] ---------------------------"
# 
# 
# 
# 
# 
# 
# 
echo -e "\n"

}

loggingChecks()
{
echo -e "---------------------------- [ Logging Checks ] ---------------------------"
# Take date and save as variable
# Give option to input manual date instead of taking the date
# Check all logs against the date survey was ran
# 
# journalctl date format "2015-01-10 17:15:00"
# servTime=$(date +"%Y-%M-%d %T")

# macOS /var/log/system.log*
# macOS /Library/Logs/*
echo -e "\n"
}
# ----------------------------------------------------------------------------------

# Execute each function/stage of the script
standardChecks()
{
# Check local and UTC date/time
echo "//------------------------------------ [ STANDARD NIXserv ] -----------------------------------//"
echo "github.com/TTYlerDurden"
echo "Version 1.0"
echo "For use in NIX host enumeration"
echo "NOT TO BE USED FOR NEFARIOUS BUSINESS."
echo "./ with care..."
echo "//---------------------------------------------------------------------------------------------//"
echo -e "\n"
echo "Checks run at: "
echo "Local: `date +"%a-%F-%T-%Z"`"; echo "Local: `date -u +"%a-%F-%T-%Z"`"
echo -e "\n"
# Checks
#If no -o options was specified, this will be default save location 
setupServTime
setupSaves
echo "STANDARD MODE PASS"

# Checks Complete
echo -e "\n"
echo "Checks done at: "
echo "Local: `date +"%a-%F-%T-%Z"`"; echo "Local: `date -u +"%a-%F-%T-%Z"`"
echo -e "\n"
}
# ----------------------------------------------------------------------------------

briefChecks()
{
# Check local and UTC date/time
echo "//------------------------------------ [ BRIEF NIXserv ] -----------------------------------//"
echo "github.com/TTYlerDurden"
echo "Version 1.0"
echo "For use in NIX host enumeration"
echo "NOT TO BE USED FOR NEFARIOUS BUSINESS."
echo "./ with care..."
echo "//------------------------------------------------------------------------------------------//"
echo -e "\n"
echo "Checks run at: "
echo "Local: `date +"%a-%F-%T-%Z"`"; echo "Local: `date -u +"%a-%F-%T-%Z"`"
echo -e "\n"
# Checks

echo "BRIEF MODE PASS"


# Checks Complete
echo -e "\n"
echo "Checks done at: "
echo "Local: `date +"%a-%F-%T-%Z"`"; echo "Local: `date -u +"%a-%F-%T-%Z"`"
echo -e "\n"
}
# ----------------------------------------------------------------------------------

verboseChecks()
{
# Check local and UTC date/time
echo "//------------------------------------ [ VERBOSE NIXserv ] -----------------------------------//"
echo "github.com/TTYlerDurden"
echo "Version 1.0"
echo "For use in NIX host enumeration"
echo "NOT TO BE USED FOR NEFARIOUS BUSINESS."
echo "./ with care..."
echo "//--------------------------------------------------------------------------------------------//"
echo -e "\n"
echo "Checks run at: "
echo "Local: `date +"%a-%F-%T-%Z"`"; echo "Local: `date -u +"%a-%F-%T-%Z"`"
echo -e "\n"
# Checks

echo "VERBOSE MODE PASS"

# Checks Complete
echo -e "\n"
echo "Checks done at: "
echo "Local: `date +"%a-%F-%T-%Z"`"; echo "Local: `date -u +"%a-%F-%T-%Z"`"
echo -e "\n"
}
# ----------------------------------------------------------------------------------

# Check to see if no arguments were given. 
# If none, then default is to run Standard Survey, with standard date/time and save locations. 
if [ "$1" == "" ]; then
	standardChecks
fi

# Read in arguments, check for illegal options, set save location
	## Need to work on being able to pass multi arguemnts 
	## Need to work on argument order 
while getopts "o:bsv:d:h" opt; do
	case ${opt} in
		h ) helpInfo; exit;;
		o ) saveLocation=${OPTARG};; # Not getting save value yet
			# Check to make sure the it's put in a valid format: https://stackoverflow.com/questions/16483119/an-example-of-how-to-use-getopts-in-bash
		b ) briefChecks;;
		s ) standardChecks;;
		v ) verboseChecks;;
		d ) servTime=${OPTARG};;
		* ) usageInfo; exit;;
	esac
done

# RunCMDs
# runChecks | tee -a $saveLocation 2>/dev/null

#END
